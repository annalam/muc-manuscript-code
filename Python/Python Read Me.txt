Python ReadMe

All figures were generated in Python 3.7.3 using the packages and libraries listed below. Our Anaconda environment can be recreated by running:

conda install PACKAGE=VERSION

Additionally we used the Spyder IDE beta version 4.0.3b, which can be installed by running:

conda install -c spyder-ide spyder=4.0.0b3

Packages used (Packages:Version):
pandas:0.24.2
matplotlib:3.0.3
seaborn:0.9.0
numpy:1.16.4
scipy:1.2.1
lifelines:0.22.3
argparse:1.1
statistics:N/A
os:N/A
sys:N/A
math:N/A

Underlying data to create the figures was formatted using the following 2 Python definitions:

'''
Input: Output of Julia code listing all copy number results for all genes and samples
Output: Pandas Dataframe (then saved as CN_melted.xlsx)
Function: Produce a dataframe where each row is a single gene for a single sample from a matrix of all samples and genes. Include copy neutral genes (copy number == 0)
in final table.
'''

def meltCN(filepath):
    df = pd.read_csv(filepath, delimiter = '\t', index_col=None)
    df = pd.melt(df, id_vars=['GENE', 'CHROMOSOME', 'START', 'END'])
    df.rename(columns={'value': 'Copy_num'}, inplace=True)
    df.rename(columns={'variable': 'Sample_ID'}, inplace=True)
    df['Log_ratio'] = df['Copy_num'].str.split(':').str[1]
    df['Copy_num'] = df['Copy_num'].str.split(':').str[0]
    df[['Copy_num','Log_ratio']] = df[['Copy_num','Log_ratio']].apply(pd.to_numeric)
    df = df[['Sample_ID', 'GENE', 'Copy_num', 'Log_ratio', 'CHROMOSOME', 'START', 'END']]
    return df;


'''
Input: Betastatsis table from output of mutato program
Output: Pandas dataframe (then saved as mut_melted.xslx)
Function: Produce a dataframe in which each row is a mutation for a single sample. Do not include rows where a mutation was not detected. 
'''

def meltBet(path):
    df = pd.read_excel(path, index_col=None)
    df = pd.melt(df, id_vars=['CHROM', 'POSITION', 'REF', 'ALT', 'GENE', 'EFFECT', 'NOTES'])
    df.rename(columns={'value': 'Allele_frequency'}, inplace=True)
    df.rename(columns={'variable': 'Sample_ID'}, inplace=True)
    df['Read_depth'] = df['Allele_frequency'].str.split(pat='%', n=-1, expand=False).str[1]
    df = df[df['Read_depth'].str.contains("*", regex=False)]
    df['Read_depth'] = df['Read_depth'].replace('\(','', regex=True)
    df['Read_depth'] = df['Read_depth'].replace('\)','', regex=True)
    df['Read_depth'] = df['Read_depth'].replace('\*','', regex=True)
    df['Read_depth'] = df['Read_depth'].replace('\*','', regex=True)
    df['Read_depth'] = df['Read_depth'].replace("\[[^]]*\]",'', regex=True)
    df['Allele_frequency'] = df['Allele_frequency'].str.split(pat='%', n=-1, expand=False).str[0]
    df = df[['Sample_ID', 'CHROM', 'POSITION', 'REF', 'ALT', 'GENE', 'EFFECT', 'Allele_frequency', 'Read_depth','NOTES']]
    df[['Read_depth','Allele_frequency']] = df[['Read_depth','Allele_frequency']].apply(pd.to_numeric)
    return df;




